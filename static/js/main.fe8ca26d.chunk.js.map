{"version":3,"sources":["components/Formatter.js","components/Scratchpad.js","components/XOR.js","App.js","reportWebVitals.js","index.js"],"names":["Formatter","input","setInput","formatterRef","useRef","useState","history","setHistory","output","useCallback","str","replace","toLowerCase","stripInvalidChars","useEffect","current","focus","className","value","ref","onChange","e","target","onKeyDown","key","flag","includes","copy","placeholder","length","map","i","onClick","filter","_","index","Scratchpad","ctrlKey","document","getSelection","toString","BASE","binary","decimal","FormatRadio","label","base","state","currentBase","setBase","htmlFor","name","type","id","checked","XOR","setKey","baseState","format","parseInt","Object","keys","padStart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fe8ca26d.chunk.js","sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"react\";\r\nimport copy from \"copy-to-clipboard\";\r\n\r\nfunction Formatter({ input, setInput }) {\r\n  const formatterRef = useRef();\r\n  const [history, setHistory] = useState([]);\r\n  const wrapFlag = (str) => `capctf{${str}}`;\r\n  const stripInvalidChars = (str) =>\r\n    str\r\n      ?.replace(/ /g, \"_\")\r\n      ?.replace(/[^A-Za-z0-9_]/g, \"\")\r\n      .toLowerCase();\r\n\r\n  const output = useCallback(() => wrapFlag(stripInvalidChars(input)), [input]);\r\n\r\n  const handleChange = (e) => setInput(e.target.value);\r\n  const handleKeyDown = (e) => {\r\n    switch (e.key) {\r\n      case \"Escape\":\r\n        setInput(\"\");\r\n        break;\r\n      case \"Enter\":\r\n        if (!!input) {\r\n          const flag = output();\r\n          if (!history.includes(flag)) {\r\n            copy(flag);\r\n            setHistory([...history, flag]);\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    formatterRef.current.focus();\r\n  }, [input]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"output\">{output()}</div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          value={input}\r\n          className=\"formatter\"\r\n          ref={formatterRef}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder=\"flag...\"\r\n        />\r\n        <span className=\"input-length\">{input.length}</span>\r\n      </div>\r\n      <div className=\"history\">\r\n        {history.map((flag, i) => (\r\n          <div key={i}>\r\n            <button\r\n              className=\"history-button\"\r\n              onClick={() =>\r\n                setHistory(history.filter((_, index) => index !== i))\r\n              }\r\n            >\r\n              {flag}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Formatter;\r\n","function Scratchpad({ setInput }) {\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Ã¸\" && e.ctrlKey) {\r\n      setInput(document.getSelection().toString());\r\n    }\r\n  };\r\n  return <textarea className=\"scratchpad\" onKeyDown={handleKeyDown}></textarea>;\r\n}\r\n\r\nexport default Scratchpad;\r\n","import { useState } from \"react\";\r\n\r\nconst BASE = {\r\n  binary: 2,\r\n  decimal: 10,\r\n};\r\n\r\nconst FormatRadio = ({ label, base, state: [currentBase, setBase] }) => (\r\n  <>\r\n    <label htmlFor={`selectFormat-${base}`}>{label}</label>\r\n    <input\r\n      name=\"xor-format\"\r\n      type=\"radio\"\r\n      id={`selectFormat-${base}`}\r\n      checked={currentBase === base}\r\n      onChange={() => setBase(base)}\r\n    />\r\n  </>\r\n);\r\n\r\nfunction XOR() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n  const baseState = useState(BASE.binary);\r\n  const [base] = baseState;\r\n  const format = (str) => (base < 35 ? parseInt(str, base) : str);\r\n  const output = () => {\r\n    if (!input) {\r\n      return \"\";\r\n    }\r\n    const result = format(input) ^ format(key);\r\n    return result.toString(base).padStart(input.length, \"0\");\r\n  };\r\n  return (\r\n    <div className=\"xor\">\r\n      <div>\r\n        <h2>xor</h2>\r\n        {Object.keys(BASE).map((label) => (\r\n          <FormatRadio label={label} base={BASE[label]} state={baseState} />\r\n        ))}\r\n      </div>\r\n\r\n      <input\r\n        placeholder=\"input\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n\r\n      <input\r\n        placeholder=\"key\"\r\n        value={key}\r\n        onChange={(e) => setKey(e.target.value)}\r\n      />\r\n      <span className=\"xor-output\">{output()}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default XOR;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Formatter from \"./components/Formatter\";\r\nimport Scratchpad from \"./components/Scratchpad\";\r\nimport XOR from \"./components/XOR\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"\");\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>CapCTF</h1>\r\n      </header>\r\n      <main>\r\n        <Scratchpad setInput={setInput} />\r\n        <Formatter input={input} setInput={setInput} />\r\n        <XOR />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}